[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\HP\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\HP\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.6 (Oracle Corporation Java 1.8.0_202)
[debug]       Load.loadUnit: plugins took 687.0298ms
[debug]       Load.loadUnit: defsScala took 0.673ms
[debug] [Loading] Scanning directory C:\Users\HP\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\HP\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 115.2692 ms
[debug]           Load.resolveProject(global-plugins) took 115.6543ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\HP\.sbt\1.0\plugins, plugins: List(<none>))) took 314.4575ms
[debug] [Loading] Done in C:\Users\HP\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 423.2583ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5516ms
[debug]     Load.loadUnit(file:/C:/Users/HP/.sbt/1.0/plugins/, ...) took 1138.7482ms
[debug]   Load.apply: load took 1640.0177ms
[debug]   Load.apply: resolveProjects took 14.4489ms
[debug]   Load.apply: finalTransforms took 191.4196ms
[debug]   Load.apply: config.delegates took 18.0055ms
[debug]   Load.apply: Def.make(settings)... took 1987.7014ms
[debug]   Load.apply: structureIndex took 391.0696ms
[debug]   Load.apply: mkStreams took 3.6226ms
[info] loading global plugins from C:\Users\HP\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 27226.3785ms
[debug]           Load.loadUnit: plugins took 84.2586ms
[debug]           Load.loadUnit: defsScala took 0.0053ms
[debug] [Loading] Scanning directory C:\Users\HP\IdeaProjects\scalaPractice\project
[debug]             Load.loadUnit: mkEval took 84.8004ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\HP\IdeaProjects\scalaPractice\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.832 ms
[info] loading settings for project scalapractice-build from idea.sbt ...
[debug]               Load.resolveProject(scalapractice-build) took 52.7871ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalapractice-build, base: C:\Users\HP\IdeaProjects\scalaPractice\project, plugins: List(<none>))) took 58.5596ms
[debug] [Loading] Done in C:\Users\HP\IdeaProjects\scalaPractice\project, returning: (scalapractice-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 15404.4907ms
[debug]           Load.loadUnit: cleanEvalClasses took 12.4028ms
[debug]         Load.loadUnit(file:/C:/Users/HP/IdeaProjects/scalaPractice/project/, ...) took 15503.0617ms
[debug]       Load.apply: load took 15505.6307ms
[debug]       Load.apply: resolveProjects took 0.1758ms
[debug]       Load.apply: finalTransforms took 31.0143ms
[debug]       Load.apply: config.delegates took 0.8269ms
[debug]       Load.apply: Def.make(settings)... took 604.1369ms
[debug]       Load.apply: structureIndex took 117.6629ms
[debug]       Load.apply: mkStreams took 0.0053ms
[info] loading project definition from C:\Users\HP\IdeaProjects\scalaPractice\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 26415.3356ms
[debug]     Load.loadUnit: defsScala took 0.0056ms
[debug] [Loading] Scanning directory C:\Users\HP\IdeaProjects\scalaPractice
[debug]       Load.loadUnit: mkEval took 0.5832ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 30.1261 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 139.9477ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\HP\IdeaProjects\scalaPractice, plugins: List(<none>))) took 177.408ms
[debug] [Loading] Done in C:\Users\HP\IdeaProjects\scalaPractice, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 12403.1715ms
[debug]     Load.loadUnit: cleanEvalClasses took 57.4299ms
[debug]   Load.loadUnit(file:/C:/Users/HP/IdeaProjects/scalaPractice/, ...) took 38880.466ms
[debug] Load.apply: load took 38889.6241ms
[debug] Load.apply: resolveProjects took 0.3069ms
[debug] Load.apply: finalTransforms took 65.5792ms
[debug] Load.apply: config.delegates took 0.504ms
[debug] Load.apply: Def.make(settings)... took 785.755ms
[debug] Load.apply: structureIndex took 60.0325ms
[debug] Load.apply: mkStreams took 0.0057ms
[info] set current project to BI (in build file:/C:/Users/HP/IdeaProjects/scalaPractice/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56018 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56018, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to BI (in build file:/C:/Users/HP/IdeaProjects/scalaPractice/)
[debug] > Exec(idea-shell, None, None)
